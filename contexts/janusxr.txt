You are working on a web-based 3d world using the JanusXR library. A janus room is made with JML markup embedded in an HTML file, like so:

### JanusXR Markup Example
```
<html>
  <body>
    <script src="https://web.janusxr.org/1.5.53/janusweb.js"></script>
    <janus-viewer>
      <assets>
        <assetimage id="myimage" src="https://my.server.com/image.jpg" />
        <assetobject id="my3dobject" src="https://other.server.net/thingy.glb" />
        <assetsound id="ambientsound" src="mysound.ogg" />
        <assetsound id="localizedsound" src="crickets.mp3" />
        <assetvideo id="coolvideo" src="/path/to/coolvideo.mp4" />
        <assetscript src="myscript.js" />
      </assets>
      <room pos="0 0 0">
        <object id="my3dobject" js_id="unique_object_id" col="red" pos="1 2 3" />
        <object id="cube" image_id="myimage" pos="7 -8 9" scale="100 .1 100" />
        <object id="sphere" pos="0 0 -4" collision_id="sphere" onclick="alert('hello!')" />
        <image id="myimage" pos="10 0 1" rotation="0 45 0" />
        <sound id="ambientsound" />
        <sound id="localizedsound" pos="-4 0 3.2" />
        <video pos="0 0 -10" scale="16 9 1" id="coolvideo" />
      </room>
    </janus-viewer>
  </body>
</html>
```

## JanusXR custom element definition
Janus markup can also be extended with custom elements in assetscripts by using the following syntax:
```
room.registerElement('my-custom-element', {
  someattribute: 'defaultvalue',
  numericattribute: 4.2,
  booleanattribute: true,
  vectorattribute: V(),

  create() {
    // Called once for each instance of this element to perform any initialization, including creating child objects and setting up events
    this.thing1 = this.createObject('object', { id: 'cube', scale: V(1, .1, 2), col: 'yellow' });
    this.thing2 = this.createObject('object', { id: 'torus', col: '#0f0', collision_id: 'torus' });

    this.thing2.addEventListener('click', ev => this.handleClick(ev));
    this.thing2.addEventListener('mouseover', ev => this.handleMouseOver(ev));
    this.thing2.addEventListener('mouseout', ev => this.handleMouseOut(ev));
  },
  update(dt) {
    // Called once per frame for each instance of this element
    this.thing1.rotation.y += Math.PI/2 * dt;
  },
  handleClick(ev) {
    this.thing1.col = '#f0f';
  },
  handleMouseOver(ev) {
    this.thing2.scale.set(1.1, 1.1, 1.1);
  },
  handleMouseOut(ev) {
    this.thing2.scale.set(1, 1, 1);
  }
});
```

Note that `this.createObject()` creates objects as a child of this object (which will follow the object as it moves and rotates), while `room.createObject()` can be used to create objects parented to the room (useful for spawning objects like projectiles or objects that our custom element places in the world).

Attributes are defined simply by specifying them in our element definition as member attributes of our custom element, which can then be referenced in markup and in code. Their type is inferred by specifying a default value (boolean, string, numeric, or vector)

After defining a custom element, it can be used as needed within a <room> using `<my-custom-element someattribute="boing" />`, or spawned using `this.createObject('my-custom-element', { someattribute: "boing" })`

## Notes about JanusXR markup and code
- units are in meters
- rotations are always in degrees, not radians
- built-in primitive types are sphere, cube, cone, cylinder, pyramid, torus, pipe, and plane
- All types of elements support a number of default attributes: pos, rotation, scale, vel, mass, accel, restitution, opacity, visible, billboard, classname, renderorder, pickable, collidable, collision_id, rotate_deg_per_sec, rotate_axis, locked, js_id)
- All types of elements support a number of member functions: createObject, appendChild, removeChild, addEventListener, dispatchEvent, removeEventListener, localToWorld, worldToLocal, distanceTo, addForce, removeForce, die, addClass, removeClass, hasClass, raycast, getElementsByTagName
- All types of elements support a number of events: update, change, collision, mouseover, mouseout, mousemove, mousedown, mouseup, click, touchstart, touchmove, touchend, dragover, drag, dragenter, dragleave, dragstart, dragend, drop. These events can be handled in code using the `object.addEventListener('eventtype', handlerFunction)` syntax or in markup with `<object oneventtype="doSomethingWith(this, event)">`
- vector attributes like pos, vel, etc. are instances of THREE.Vector3(). Special handlers allow you to assign strings of the form "x y z", arrays [x, y, z], or other vectors, and reading these properties always returns an instance of THREE.Vector3. Vector3 objects can be allocated with the V() convenience function, which optionally takes x,y,z arguments.
- colors can be specified using standard HTML color names, hex codes (short or long), or RGB values with values from 0..1
- Our createObject() functions take two parameters. The first is the object type, which can be either one of the built-ins (object, image, video, text, paragraph, link, light, particle, sound) or any of our defined custom elements.  The second parameter is an object containing any attributes we want to specify.
- object, image, video, and sound elements accept an "id" parameter which specifies the id of the corresponding asset definition. For object elements, this can also be one of the built-in primitives specified above.
- the physics engine can handle projectile physics (pos, vel, and accel properties) and angular rotations (rotation, angular, angularacceleration). It also supports force generators, eg, `this.addForce('friction', 0.2)` `this.addForce('static', V(0, 10, 0))`. It also has built-in collision handling between all objects with specified collision_id attributes.

## Physics system
JanusXR has a built-in physics engine which can simulate basic projectile motion, forces, and collisions. Forces can be added or removed from any object using `object.addForce(forceType, forceParameters)` where forceParameters is an object with attributes that vary by force type. The built-in force types and their parameters are as follows:
    - static: a static adjustable force
      - force: the direction and magnitude of the static force
      - point: an optional attachment point for the force which can cause it to generate torque
      - absolute: is the force applied in absolute (world) space, or local space?
    - gravity: simple or n-body gravity force
      - accel: a Vector3 representing a static gravity force
      - others: a list of other physics objects which will exert universal gravitation force on each other based on their masses
    - friction: a force that resists motion in any direction
      - friction: the scalar coefficient of friction for this object
    - anisotropicfriction: a force that resists motion in a specific direction
      - friction: the vector3 coefficient of friction for this object
    - drag: aerodynamic drag force
      - drag: the drag coefficient for this object
    - buoyancy: floating force
      - density: object density in kg/m^3 (water is 1000 kg/m^3)
      - volume: the volume that our object occupies
    - spring: hooke's law force allows attaching two objects together with a spring of configurable strength
      - connectionpoint: the relative position of our end of the spring connection
      - otherconnectionpoint: the position of the other end of the spring connection, relative to the other object
      - other: the other object we are connected to
      - strength: the string's strength coefficient
      - restlength: the minimum length of this spring (default is 0)
      - bungee: boolean, if true the spring will pull together but will not push apart
      - hard: boolean, whether the spring can compress past its restlength


`let force = object.addForce()` will return a force object which can then be updated with `force.update(...)`, for example, a "static" force accepts a Vector3 object which will alter the force generator's direction and magnitude.

## Control contexts
Janus elements can define custom control contexts which can be enabled, disabled, and remapped dynamically.

Example:
```
room.registerElement('controllable-rocket', {
    gimbalstrength: .1,
    create() {
        this.controlstate = this.addControlContext('controllable-rocket', {
            'launch': { defaultbindings: 'keyboard_space', onactivate: ev => this.launch() },
            'yaw_left': { defaultbindings: 'keyboard_a' },
            'yaw_right': { defaultbindings: 'keyboard_d,gamepad_any_axis_0' },
            'pitch_up': { defaultbindings: 'keyboard_w,gamepad_any_axis_1' },
            'pitch_down': { defaultbindings: 'keyboard_s' },
            'fire': { defaultbindings: 'keyboard_ctrl,gamepad_any_button_0', onactivate: ev => this.startFiring(), ondeactivate: this.stopFiring() }
        });
        this.thrustvector = V(0, 0, 0);
        this.engineforce = this.addForce('static', { force: this.thrustvector, point: V(0,-1,0) });
    },
    update(dt) {
        this.thrustvector.x = (this.controlstate.yaw_right - this.controlstate.yaw_left) * this.gimbalstrength;
        this.thrustvector.z = (this.controlstate.pitch_up - this.controlstate.pitch_down) * this.gimbalstrength;
        this.engineforce.update(this.thrustvector);
    },
    launch() {
        this.thrustvector.y = 1000;
    },
    startFiring() {
        this.firing = true;
    },
    stopFiring() {
        this.firing = false;
    }
});
```


